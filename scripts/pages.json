[{"name":"abstract fun add(neuron: Neuron): Int","description":"we.rashchenko.networks.NeuralNetwork.add","location":"chnn-library/we.rashchenko.networks/-neural-network/add.html","searchKeys":["add","abstract fun add(neuron: Neuron): Int","we.rashchenko.networks.NeuralNetwork.add"]},{"name":"abstract fun addConnection(fromNeuronID: Int, toNeuronID: Int): Boolean","description":"we.rashchenko.networks.NeuralNetwork.addConnection","location":"chnn-library/we.rashchenko.networks/-neural-network/add-connection.html","searchKeys":["addConnection","abstract fun addConnection(fromNeuronID: Int, toNeuronID: Int): Boolean","we.rashchenko.networks.NeuralNetwork.addConnection"]},{"name":"abstract fun addInputNeuron(neuron: InputNeuron): Int","description":"we.rashchenko.networks.NeuralNetworkWithInput.addInputNeuron","location":"chnn-library/we.rashchenko.networks/-neural-network-with-input/add-input-neuron.html","searchKeys":["addInputNeuron","abstract fun addInputNeuron(neuron: InputNeuron): Int","we.rashchenko.networks.NeuralNetworkWithInput.addInputNeuron"]},{"name":"abstract fun addInputOutputEnvironment(environment: InputOutputEnvironment): Int","description":"we.rashchenko.networks.builders.NeuralNetworkWithInputBuilder.addInputOutputEnvironment","location":"chnn-library/we.rashchenko.networks.builders/-neural-network-with-input-builder/add-input-output-environment.html","searchKeys":["addInputOutputEnvironment","abstract fun addInputOutputEnvironment(environment: InputOutputEnvironment): Int","we.rashchenko.networks.builders.NeuralNetworkWithInputBuilder.addInputOutputEnvironment"]},{"name":"abstract fun addNeurons(n: Int = 1): List<Int>","description":"we.rashchenko.networks.builders.NeuralNetworkBuilder.addNeurons","location":"chnn-library/we.rashchenko.networks.builders/-neural-network-builder/add-neurons.html","searchKeys":["addNeurons","abstract fun addNeurons(n: Int = 1): List<Int>","we.rashchenko.networks.builders.NeuralNetworkBuilder.addNeurons"]},{"name":"abstract fun forgetSource(sourceId: Int)","description":"we.rashchenko.neurons.Neuron.forgetSource","location":"chnn-library/we.rashchenko.neurons/-neuron/forget-source.html","searchKeys":["forgetSource","abstract fun forgetSource(sourceId: Int)","we.rashchenko.neurons.Neuron.forgetSource"]},{"name":"abstract fun getControllerFeedbacks(neurons: List<ControlledNeuron>): List<Feedback>","description":"we.rashchenko.networks.controllers.NeuralNetworkController.getControllerFeedbacks","location":"chnn-library/we.rashchenko.networks.controllers/-neural-network-controller/get-controller-feedbacks.html","searchKeys":["getControllerFeedbacks","abstract fun getControllerFeedbacks(neurons: List<ControlledNeuron>): List<Feedback>","we.rashchenko.networks.controllers.NeuralNetworkController.getControllerFeedbacks"]},{"name":"abstract fun getEnvironmentOutputNeuronIDs(environmentID: Int): List<Int>?","description":"we.rashchenko.networks.builders.NeuralNetworkWithInputBuilder.getEnvironmentOutputNeuronIDs","location":"chnn-library/we.rashchenko.networks.builders/-neural-network-with-input-builder/get-environment-output-neuron-i-ds.html","searchKeys":["getEnvironmentOutputNeuronIDs","abstract fun getEnvironmentOutputNeuronIDs(environmentID: Int): List<Int>?","we.rashchenko.networks.builders.NeuralNetworkWithInputBuilder.getEnvironmentOutputNeuronIDs"]},{"name":"abstract fun getFeedback(neuronID: Int): Feedback?","description":"we.rashchenko.networks.NeuralNetwork.getFeedback","location":"chnn-library/we.rashchenko.networks/-neural-network/get-feedback.html","searchKeys":["getFeedback","abstract fun getFeedback(neuronID: Int): Feedback?","we.rashchenko.networks.NeuralNetwork.getFeedback"]},{"name":"abstract fun getFeedback(sourceId: Int): Feedback","description":"we.rashchenko.neurons.Neuron.getFeedback","location":"chnn-library/we.rashchenko.neurons/-neuron/get-feedback.html","searchKeys":["getFeedback","abstract fun getFeedback(sourceId: Int): Feedback","we.rashchenko.neurons.Neuron.getFeedback"]},{"name":"abstract fun getInputNeuron(neuronID: Int): InputNeuron?","description":"we.rashchenko.networks.NeuralNetworkWithInput.getInputNeuron","location":"chnn-library/we.rashchenko.networks/-neural-network-with-input/get-input-neuron.html","searchKeys":["getInputNeuron","abstract fun getInputNeuron(neuronID: Int): InputNeuron?","we.rashchenko.networks.NeuralNetworkWithInput.getInputNeuron"]},{"name":"abstract fun getInternalFeedback(): Feedback","description":"we.rashchenko.neurons.inputs.InputNeuron.getInternalFeedback","location":"chnn-library/we.rashchenko.neurons.inputs/-input-neuron/get-internal-feedback.html","searchKeys":["getInternalFeedback","abstract fun getInternalFeedback(): Feedback","we.rashchenko.neurons.inputs.InputNeuron.getInternalFeedback"]},{"name":"abstract fun getNeuron(neuronID: Int): Neuron?","description":"we.rashchenko.networks.NeuralNetwork.getNeuron","location":"chnn-library/we.rashchenko.networks/-neural-network/get-neuron.html","searchKeys":["getNeuron","abstract fun getNeuron(neuronID: Int): Neuron?","we.rashchenko.networks.NeuralNetwork.getNeuron"]},{"name":"abstract fun next(id: Int): Neuron","description":"we.rashchenko.neurons.NeuronsSampler.next","location":"chnn-library/we.rashchenko.neurons/-neurons-sampler/next.html","searchKeys":["next","abstract fun next(id: Int): Neuron","we.rashchenko.neurons.NeuronsSampler.next"]},{"name":"abstract fun remove(neuronID: Int): Boolean","description":"we.rashchenko.networks.NeuralNetwork.remove","location":"chnn-library/we.rashchenko.networks/-neural-network/remove.html","searchKeys":["remove","abstract fun remove(neuronID: Int): Boolean","we.rashchenko.networks.NeuralNetwork.remove"]},{"name":"abstract fun remove(neuronID: Int): Boolean","description":"we.rashchenko.networks.builders.NeuralNetworkBuilder.remove","location":"chnn-library/we.rashchenko.networks.builders/-neural-network-builder/remove.html","searchKeys":["remove","abstract fun remove(neuronID: Int): Boolean","we.rashchenko.networks.builders.NeuralNetworkBuilder.remove"]},{"name":"abstract fun removeConnection(fromNeuronID: Int, toNeuronID: Int): Boolean","description":"we.rashchenko.networks.NeuralNetwork.removeConnection","location":"chnn-library/we.rashchenko.networks/-neural-network/remove-connection.html","searchKeys":["removeConnection","abstract fun removeConnection(fromNeuronID: Int, toNeuronID: Int): Boolean","we.rashchenko.networks.NeuralNetwork.removeConnection"]},{"name":"abstract fun reportDeath(id: Int)","description":"we.rashchenko.neurons.NeuronsSampler.reportDeath","location":"chnn-library/we.rashchenko.neurons/-neurons-sampler/report-death.html","searchKeys":["reportDeath","abstract fun reportDeath(id: Int)","we.rashchenko.neurons.NeuronsSampler.reportDeath"]},{"name":"abstract fun reportFeedback(id: Int, feedback: Feedback)","description":"we.rashchenko.neurons.NeuronsSampler.reportFeedback","location":"chnn-library/we.rashchenko.neurons/-neurons-sampler/report-feedback.html","searchKeys":["reportFeedback","abstract fun reportFeedback(id: Int, feedback: Feedback)","we.rashchenko.neurons.NeuronsSampler.reportFeedback"]},{"name":"abstract fun tick()","description":"we.rashchenko.base.Ticking.tick","location":"chnn-library/we.rashchenko.base/-ticking/tick.html","searchKeys":["tick","abstract fun tick()","we.rashchenko.base.Ticking.tick"]},{"name":"abstract fun touch(sourceId: Int, timeStep: Long)","description":"we.rashchenko.neurons.Neuron.touch","location":"chnn-library/we.rashchenko.neurons/-neuron/touch.html","searchKeys":["touch","abstract fun touch(sourceId: Int, timeStep: Long)","we.rashchenko.neurons.Neuron.touch"]},{"name":"abstract fun update(feedback: Feedback, timeStep: Long)","description":"we.rashchenko.neurons.Neuron.update","location":"chnn-library/we.rashchenko.neurons/-neuron/update.html","searchKeys":["update","abstract fun update(feedback: Feedback, timeStep: Long)","we.rashchenko.neurons.Neuron.update"]},{"name":"abstract override val neuralNetwork: NeuralNetworkWithInput","description":"we.rashchenko.networks.builders.NeuralNetworkWithInputBuilder.neuralNetwork","location":"chnn-library/we.rashchenko.networks.builders/-neural-network-with-input-builder/neural-network.html","searchKeys":["neuralNetwork","abstract override val neuralNetwork: NeuralNetworkWithInput","we.rashchenko.networks.builders.NeuralNetworkWithInputBuilder.neuralNetwork"]},{"name":"abstract val active: Boolean","description":"we.rashchenko.base.Activity.active","location":"chnn-library/we.rashchenko.base/-activity/active.html","searchKeys":["active","abstract val active: Boolean","we.rashchenko.base.Activity.active"]},{"name":"abstract val activities: List<Activity>","description":"we.rashchenko.base.ObservableActivities.activities","location":"chnn-library/we.rashchenko.base/-observable-activities/activities.html","searchKeys":["activities","abstract val activities: List<Activity>","we.rashchenko.base.ObservableActivities.activities"]},{"name":"abstract val author: String","description":"we.rashchenko.neurons.NeuronsSampler.author","location":"chnn-library/we.rashchenko.neurons/-neurons-sampler/author.html","searchKeys":["author","abstract val author: String","we.rashchenko.neurons.NeuronsSampler.author"]},{"name":"abstract val baseNeuron: Neuron","description":"we.rashchenko.neurons.inputs.InputNeuron.baseNeuron","location":"chnn-library/we.rashchenko.neurons.inputs/-input-neuron/base-neuron.html","searchKeys":["baseNeuron","abstract val baseNeuron: Neuron","we.rashchenko.neurons.inputs.InputNeuron.baseNeuron"]},{"name":"abstract val connections: Map<Int, Collection<Int>>","description":"we.rashchenko.networks.NeuralNetwork.connections","location":"chnn-library/we.rashchenko.networks/-neural-network/connections.html","searchKeys":["connections","abstract val connections: Map<Int, Collection<Int>>","we.rashchenko.networks.NeuralNetwork.connections"]},{"name":"abstract val externalActivity: Activity","description":"we.rashchenko.neurons.inputs.InputNeuron.externalActivity","location":"chnn-library/we.rashchenko.neurons.inputs/-input-neuron/external-activity.html","searchKeys":["externalActivity","abstract val externalActivity: Activity","we.rashchenko.neurons.inputs.InputNeuron.externalActivity"]},{"name":"abstract val inputActivities: List<Activity>","description":"we.rashchenko.environments.InputOutputEnvironment.inputActivities","location":"chnn-library/we.rashchenko.environments/-input-output-environment/input-activities.html","searchKeys":["inputActivities","abstract val inputActivities: List<Activity>","we.rashchenko.environments.InputOutputEnvironment.inputActivities"]},{"name":"abstract val inputNeuronIDs: Collection<Int>","description":"we.rashchenko.networks.NeuralNetworkWithInput.inputNeuronIDs","location":"chnn-library/we.rashchenko.networks/-neural-network-with-input/input-neuron-i-ds.html","searchKeys":["inputNeuronIDs","abstract val inputNeuronIDs: Collection<Int>","we.rashchenko.networks.NeuralNetworkWithInput.inputNeuronIDs"]},{"name":"abstract val name: String","description":"we.rashchenko.neurons.NeuronsSampler.name","location":"chnn-library/we.rashchenko.neurons/-neurons-sampler/name.html","searchKeys":["name","abstract val name: String","we.rashchenko.neurons.NeuronsSampler.name"]},{"name":"abstract val neuralNetwork: NeuralNetwork","description":"we.rashchenko.networks.builders.NeuralNetworkBuilder.neuralNetwork","location":"chnn-library/we.rashchenko.networks.builders/-neural-network-builder/neural-network.html","searchKeys":["neuralNetwork","abstract val neuralNetwork: NeuralNetwork","we.rashchenko.networks.builders.NeuralNetworkBuilder.neuralNetwork"]},{"name":"abstract val neuronIDs: Collection<Int>","description":"we.rashchenko.networks.NeuralNetwork.neuronIDs","location":"chnn-library/we.rashchenko.networks/-neural-network/neuron-i-ds.html","searchKeys":["neuronIDs","abstract val neuronIDs: Collection<Int>","we.rashchenko.networks.NeuralNetwork.neuronIDs"]},{"name":"abstract val outputActivities: List<HiddenActivity>","description":"we.rashchenko.environments.InputOutputEnvironment.outputActivities","location":"chnn-library/we.rashchenko.environments/-input-output-environment/output-activities.html","searchKeys":["outputActivities","abstract val outputActivities: List<HiddenActivity>","we.rashchenko.environments.InputOutputEnvironment.outputActivities"]},{"name":"abstract val timeStep: Long","description":"we.rashchenko.base.Ticking.timeStep","location":"chnn-library/we.rashchenko.base/-ticking/time-step.html","searchKeys":["timeStep","abstract val timeStep: Long","we.rashchenko.base.Ticking.timeStep"]},{"name":"abstract var hidden: Boolean","description":"we.rashchenko.base.HiddenActivity.hidden","location":"chnn-library/we.rashchenko.base/-hidden-activity/hidden.html","searchKeys":["hidden","abstract var hidden: Boolean","we.rashchenko.base.HiddenActivity.hidden"]},{"name":"class ActivityController : NeuralNetworkController","description":"we.rashchenko.networks.controllers.ActivityController","location":"chnn-library/we.rashchenko.networks.controllers/-activity-controller/index.html","searchKeys":["ActivityController","class ActivityController : NeuralNetworkController","we.rashchenko.networks.controllers.ActivityController"]},{"name":"class ComplexController(controllers: List<NeuralNetworkController>, weights: List<Double>?) : NeuralNetworkController","description":"we.rashchenko.networks.controllers.ComplexController","location":"chnn-library/we.rashchenko.networks.controllers/-complex-controller/index.html","searchKeys":["ComplexController","class ComplexController(controllers: List<NeuralNetworkController>, weights: List<Double>?) : NeuralNetworkController","we.rashchenko.networks.controllers.ComplexController"]},{"name":"class ControlledNeuralNetwork(baseNeuralNetwork: NeuralNetworkWithInput, controller: NeuralNetworkController, auditProbability: Double, updateControllerFeedbackPeriod: Long, controllerFeedbackWeight: Double) : NeuralNetworkWithInput","description":"we.rashchenko.networks.ControlledNeuralNetwork","location":"chnn-library/we.rashchenko.networks/-controlled-neural-network/index.html","searchKeys":["ControlledNeuralNetwork","class ControlledNeuralNetwork(baseNeuralNetwork: NeuralNetworkWithInput, controller: NeuralNetworkController, auditProbability: Double, updateControllerFeedbackPeriod: Long, controllerFeedbackWeight: Double) : NeuralNetworkWithInput","we.rashchenko.networks.ControlledNeuralNetwork"]},{"name":"class ControlledNeuron(baseNeuron: Neuron) : Neuron","description":"we.rashchenko.neurons.ControlledNeuron","location":"chnn-library/we.rashchenko.neurons/-controlled-neuron/index.html","searchKeys":["ControlledNeuron","class ControlledNeuron(baseNeuron: Neuron) : Neuron","we.rashchenko.neurons.ControlledNeuron"]},{"name":"class Evolution(builder: NeuralNetworkBuilder, neuronsForSelection: Int, warningsBeforeKill: Int, selectionProbability: Double) : Ticking, NeuralNetworkBuilder","description":"we.rashchenko.networks.builders.Evolution","location":"chnn-library/we.rashchenko.networks.builders/-evolution/index.html","searchKeys":["Evolution","class Evolution(builder: NeuralNetworkBuilder, neuronsForSelection: Int, warningsBeforeKill: Int, selectionProbability: Double) : Ticking, NeuralNetworkBuilder","we.rashchenko.networks.builders.Evolution"]},{"name":"class ExponentialMovingAverage(initialValue: Double, eps: Double)","description":"we.rashchenko.utils.ExponentialMovingAverage","location":"chnn-library/we.rashchenko.utils/-exponential-moving-average/index.html","searchKeys":["ExponentialMovingAverage","class ExponentialMovingAverage(initialValue: Double, eps: Double)","we.rashchenko.utils.ExponentialMovingAverage"]},{"name":"class ExponentialMovingAverageHotStart(eps: Double)","description":"we.rashchenko.utils.ExponentialMovingAverageHotStart","location":"chnn-library/we.rashchenko.utils/-exponential-moving-average-hot-start/index.html","searchKeys":["ExponentialMovingAverageHotStart","class ExponentialMovingAverageHotStart(eps: Double)","we.rashchenko.utils.ExponentialMovingAverageHotStart"]},{"name":"class ExternallyControlledActivity : Activity","description":"we.rashchenko.base.ExternallyControlledActivity","location":"chnn-library/we.rashchenko.base/-externally-controlled-activity/index.html","searchKeys":["ExternallyControlledActivity","class ExternallyControlledActivity : Activity","we.rashchenko.base.ExternallyControlledActivity"]},{"name":"class ExternallyControlledHiddenActivity : HiddenActivity","description":"we.rashchenko.base.ExternallyControlledHiddenActivity","location":"chnn-library/we.rashchenko.base/-externally-controlled-hidden-activity/index.html","searchKeys":["ExternallyControlledHiddenActivity","class ExternallyControlledHiddenActivity : HiddenActivity","we.rashchenko.base.ExternallyControlledHiddenActivity"]},{"name":"class IDsGenerator","description":"we.rashchenko.utils.IDsGenerator","location":"chnn-library/we.rashchenko.utils/-i-ds-generator/index.html","searchKeys":["IDsGenerator","class IDsGenerator","we.rashchenko.utils.IDsGenerator"]},{"name":"class KNearestVectorsConnectionSampler(k: Int)","description":"we.rashchenko.utils.KNearestVectorsConnectionSampler","location":"chnn-library/we.rashchenko.utils/-k-nearest-vectors-connection-sampler/index.html","searchKeys":["KNearestVectorsConnectionSampler","class KNearestVectorsConnectionSampler(k: Int)","we.rashchenko.utils.KNearestVectorsConnectionSampler"]},{"name":"class MetricsCalculator(environmentID: Int, nnBuilder: NeuralNetworkWithInputBuilder)","description":"we.rashchenko.utils.MetricsCalculator","location":"chnn-library/we.rashchenko.utils/-metrics-calculator/index.html","searchKeys":["MetricsCalculator","class MetricsCalculator(environmentID: Int, nnBuilder: NeuralNetworkWithInputBuilder)","we.rashchenko.utils.MetricsCalculator"]},{"name":"class MirroringNeuron(externalActivity: Activity, baseNeuron: Neuron) : InputNeuron","description":"we.rashchenko.neurons.inputs.MirroringNeuron","location":"chnn-library/we.rashchenko.neurons.inputs/-mirroring-neuron/index.html","searchKeys":["MirroringNeuron","class MirroringNeuron(externalActivity: Activity, baseNeuron: Neuron) : InputNeuron","we.rashchenko.neurons.inputs.MirroringNeuron"]},{"name":"class NeuralNetworkIn2DBuilderFixed(neuralNetwork: NeuralNetworkWithInput, neuronsSampler: NeuronsSampler, kNeighbours: Int) : NeuralNetworkWithInputBuilder","description":"we.rashchenko.networks.builders.NeuralNetworkIn2DBuilderFixed","location":"chnn-library/we.rashchenko.networks.builders/-neural-network-in2-d-builder-fixed/index.html","searchKeys":["NeuralNetworkIn2DBuilderFixed","class NeuralNetworkIn2DBuilderFixed(neuralNetwork: NeuralNetworkWithInput, neuronsSampler: NeuronsSampler, kNeighbours: Int) : NeuralNetworkWithInputBuilder","we.rashchenko.networks.builders.NeuralNetworkIn2DBuilderFixed"]},{"name":"class NeuronsManager : NeuronsSampler","description":"we.rashchenko.neurons.NeuronsManager","location":"chnn-library/we.rashchenko.neurons/-neurons-manager/index.html","searchKeys":["NeuronsManager","class NeuronsManager : NeuronsSampler","we.rashchenko.neurons.NeuronsManager"]},{"name":"class RandomPositionSampler : Iterator<Vector2> ","description":"we.rashchenko.utils.RandomPositionSampler","location":"chnn-library/we.rashchenko.utils/-random-position-sampler/index.html","searchKeys":["RandomPositionSampler","class RandomPositionSampler : Iterator<Vector2> ","we.rashchenko.utils.RandomPositionSampler"]},{"name":"class SamplerStats(score: Double, chooseProbability: Double, population: Int)","description":"we.rashchenko.neurons.SamplerStats","location":"chnn-library/we.rashchenko.neurons/-sampler-stats/index.html","searchKeys":["SamplerStats","class SamplerStats(score: Double, chooseProbability: Double, population: Int)","we.rashchenko.neurons.SamplerStats"]},{"name":"class SimpleEnvironment(tickPeriod: Int) : InputOutputEnvironment","description":"we.rashchenko.environments.SimpleEnvironment","location":"chnn-library/we.rashchenko.environments/-simple-environment/index.html","searchKeys":["SimpleEnvironment","class SimpleEnvironment(tickPeriod: Int) : InputOutputEnvironment","we.rashchenko.environments.SimpleEnvironment"]},{"name":"class StochasticNeuralNetwork : NeuralNetworkWithInput","description":"we.rashchenko.networks.StochasticNeuralNetwork","location":"chnn-library/we.rashchenko.networks/-stochastic-neural-network/index.html","searchKeys":["StochasticNeuralNetwork","class StochasticNeuralNetwork : NeuralNetworkWithInput","we.rashchenko.networks.StochasticNeuralNetwork"]},{"name":"class SupervisedNeuron(externalActivity: HiddenActivity, baseNeuron: Neuron) : InputNeuron","description":"we.rashchenko.neurons.inputs.SupervisedNeuron","location":"chnn-library/we.rashchenko.neurons.inputs/-supervised-neuron/index.html","searchKeys":["SupervisedNeuron","class SupervisedNeuron(externalActivity: HiddenActivity, baseNeuron: Neuron) : InputNeuron","we.rashchenko.neurons.inputs.SupervisedNeuron"]},{"name":"class TimeController : NeuralNetworkController","description":"we.rashchenko.networks.controllers.TimeController","location":"chnn-library/we.rashchenko.networks.controllers/-time-controller/index.html","searchKeys":["TimeController","class TimeController : NeuralNetworkController","we.rashchenko.networks.controllers.TimeController"]},{"name":"class WorstNNeuronIDs(n: Int) : WorstN<Pair<Int, Feedback>> ","description":"we.rashchenko.utils.collections.WorstNNeuronIDs","location":"chnn-library/we.rashchenko.utils.collections/-worst-n-neuron-i-ds/index.html","searchKeys":["WorstNNeuronIDs","class WorstNNeuronIDs(n: Int) : WorstN<Pair<Int, Feedback>> ","we.rashchenko.utils.collections.WorstNNeuronIDs"]},{"name":"const val ZERO_DIV_EPS: Double = 0.00001","description":"we.rashchenko.utils.ZERO_DIV_EPS","location":"chnn-library/we.rashchenko.utils/-z-e-r-o_-d-i-v_-e-p-s.html","searchKeys":["ZERO_DIV_EPS","const val ZERO_DIV_EPS: Double = 0.00001","we.rashchenko.utils.ZERO_DIV_EPS"]},{"name":"data class Feedback(value: Double) : Comparable<Feedback> ","description":"we.rashchenko.base.Feedback","location":"chnn-library/we.rashchenko.base/-feedback/index.html","searchKeys":["Feedback","data class Feedback(value: Double) : Comparable<Feedback> ","we.rashchenko.base.Feedback"]},{"name":"data class Vector2(x: Float, y: Float)","description":"we.rashchenko.utils.Vector2","location":"chnn-library/we.rashchenko.utils/-vector2/index.html","searchKeys":["Vector2","data class Vector2(x: Float, y: Float)","we.rashchenko.utils.Vector2"]},{"name":"fun <T> AlwaysSorted(comparator: Comparator<T>)","description":"we.rashchenko.utils.collections.AlwaysSorted.AlwaysSorted","location":"chnn-library/we.rashchenko.utils.collections/-always-sorted/-always-sorted.html","searchKeys":["AlwaysSorted","fun <T> AlwaysSorted(comparator: Comparator<T>)","we.rashchenko.utils.collections.AlwaysSorted.AlwaysSorted"]},{"name":"fun ActivityController()","description":"we.rashchenko.networks.controllers.ActivityController.ActivityController","location":"chnn-library/we.rashchenko.networks.controllers/-activity-controller/-activity-controller.html","searchKeys":["ActivityController","fun ActivityController()","we.rashchenko.networks.controllers.ActivityController.ActivityController"]},{"name":"fun ComplexController(controllers: List<NeuralNetworkController>, weights: List<Double>? = null)","description":"we.rashchenko.networks.controllers.ComplexController.ComplexController","location":"chnn-library/we.rashchenko.networks.controllers/-complex-controller/-complex-controller.html","searchKeys":["ComplexController","fun ComplexController(controllers: List<NeuralNetworkController>, weights: List<Double>? = null)","we.rashchenko.networks.controllers.ComplexController.ComplexController"]},{"name":"fun ControlledNeuralNetwork(baseNeuralNetwork: NeuralNetworkWithInput, controller: NeuralNetworkController, auditProbability: Double, updateControllerFeedbackPeriod: Long, controllerFeedbackWeight: Double)","description":"we.rashchenko.networks.ControlledNeuralNetwork.ControlledNeuralNetwork","location":"chnn-library/we.rashchenko.networks/-controlled-neural-network/-controlled-neural-network.html","searchKeys":["ControlledNeuralNetwork","fun ControlledNeuralNetwork(baseNeuralNetwork: NeuralNetworkWithInput, controller: NeuralNetworkController, auditProbability: Double, updateControllerFeedbackPeriod: Long, controllerFeedbackWeight: Double)","we.rashchenko.networks.ControlledNeuralNetwork.ControlledNeuralNetwork"]},{"name":"fun ControlledNeuron(baseNeuron: Neuron)","description":"we.rashchenko.neurons.ControlledNeuron.ControlledNeuron","location":"chnn-library/we.rashchenko.neurons/-controlled-neuron/-controlled-neuron.html","searchKeys":["ControlledNeuron","fun ControlledNeuron(baseNeuron: Neuron)","we.rashchenko.neurons.ControlledNeuron.ControlledNeuron"]},{"name":"fun Double.clip(minValue: Double = 0.0, maxValue: Double = 1.0): Double","description":"we.rashchenko.utils.clip","location":"chnn-library/we.rashchenko.utils/clip.html","searchKeys":["clip","fun Double.clip(minValue: Double = 0.0, maxValue: Double = 1.0): Double","we.rashchenko.utils.clip"]},{"name":"fun Evolution(builder: NeuralNetworkBuilder, neuronsForSelection: Int, warningsBeforeKill: Int, selectionProbability: Double)","description":"we.rashchenko.networks.builders.Evolution.Evolution","location":"chnn-library/we.rashchenko.networks.builders/-evolution/-evolution.html","searchKeys":["Evolution","fun Evolution(builder: NeuralNetworkBuilder, neuronsForSelection: Int, warningsBeforeKill: Int, selectionProbability: Double)","we.rashchenko.networks.builders.Evolution.Evolution"]},{"name":"fun ExponentialMovingAverage(initialValue: Double, eps: Double = 0.99)","description":"we.rashchenko.utils.ExponentialMovingAverage.ExponentialMovingAverage","location":"chnn-library/we.rashchenko.utils/-exponential-moving-average/-exponential-moving-average.html","searchKeys":["ExponentialMovingAverage","fun ExponentialMovingAverage(initialValue: Double, eps: Double = 0.99)","we.rashchenko.utils.ExponentialMovingAverage.ExponentialMovingAverage"]},{"name":"fun ExponentialMovingAverageHotStart(eps: Double = 0.99)","description":"we.rashchenko.utils.ExponentialMovingAverageHotStart.ExponentialMovingAverageHotStart","location":"chnn-library/we.rashchenko.utils/-exponential-moving-average-hot-start/-exponential-moving-average-hot-start.html","searchKeys":["ExponentialMovingAverageHotStart","fun ExponentialMovingAverageHotStart(eps: Double = 0.99)","we.rashchenko.utils.ExponentialMovingAverageHotStart.ExponentialMovingAverageHotStart"]},{"name":"fun ExternallyControlledActivity()","description":"we.rashchenko.base.ExternallyControlledActivity.ExternallyControlledActivity","location":"chnn-library/we.rashchenko.base/-externally-controlled-activity/-externally-controlled-activity.html","searchKeys":["ExternallyControlledActivity","fun ExternallyControlledActivity()","we.rashchenko.base.ExternallyControlledActivity.ExternallyControlledActivity"]},{"name":"fun ExternallyControlledHiddenActivity()","description":"we.rashchenko.base.ExternallyControlledHiddenActivity.ExternallyControlledHiddenActivity","location":"chnn-library/we.rashchenko.base/-externally-controlled-hidden-activity/-externally-controlled-hidden-activity.html","searchKeys":["ExternallyControlledHiddenActivity","fun ExternallyControlledHiddenActivity()","we.rashchenko.base.ExternallyControlledHiddenActivity.ExternallyControlledHiddenActivity"]},{"name":"fun Feedback(value: Double)","description":"we.rashchenko.base.Feedback.Feedback","location":"chnn-library/we.rashchenko.base/-feedback/-feedback.html","searchKeys":["Feedback","fun Feedback(value: Double)","we.rashchenko.base.Feedback.Feedback"]},{"name":"fun IDsGenerator()","description":"we.rashchenko.utils.IDsGenerator.IDsGenerator","location":"chnn-library/we.rashchenko.utils/-i-ds-generator/-i-ds-generator.html","searchKeys":["IDsGenerator","fun IDsGenerator()","we.rashchenko.utils.IDsGenerator.IDsGenerator"]},{"name":"fun KNearestVectorsConnectionSampler(k: Int)","description":"we.rashchenko.utils.KNearestVectorsConnectionSampler.KNearestVectorsConnectionSampler","location":"chnn-library/we.rashchenko.utils/-k-nearest-vectors-connection-sampler/-k-nearest-vectors-connection-sampler.html","searchKeys":["KNearestVectorsConnectionSampler","fun KNearestVectorsConnectionSampler(k: Int)","we.rashchenko.utils.KNearestVectorsConnectionSampler.KNearestVectorsConnectionSampler"]},{"name":"fun MetricsCalculator(environmentID: Int, nnBuilder: NeuralNetworkWithInputBuilder)","description":"we.rashchenko.utils.MetricsCalculator.MetricsCalculator","location":"chnn-library/we.rashchenko.utils/-metrics-calculator/-metrics-calculator.html","searchKeys":["MetricsCalculator","fun MetricsCalculator(environmentID: Int, nnBuilder: NeuralNetworkWithInputBuilder)","we.rashchenko.utils.MetricsCalculator.MetricsCalculator"]},{"name":"fun MirroringNeuron(externalActivity: Activity, baseNeuron: Neuron)","description":"we.rashchenko.neurons.inputs.MirroringNeuron.MirroringNeuron","location":"chnn-library/we.rashchenko.neurons.inputs/-mirroring-neuron/-mirroring-neuron.html","searchKeys":["MirroringNeuron","fun MirroringNeuron(externalActivity: Activity, baseNeuron: Neuron)","we.rashchenko.neurons.inputs.MirroringNeuron.MirroringNeuron"]},{"name":"fun NeuralNetworkIn2DBuilderFixed(neuralNetwork: NeuralNetworkWithInput, neuronsSampler: NeuronsSampler, kNeighbours: Int)","description":"we.rashchenko.networks.builders.NeuralNetworkIn2DBuilderFixed.NeuralNetworkIn2DBuilderFixed","location":"chnn-library/we.rashchenko.networks.builders/-neural-network-in2-d-builder-fixed/-neural-network-in2-d-builder-fixed.html","searchKeys":["NeuralNetworkIn2DBuilderFixed","fun NeuralNetworkIn2DBuilderFixed(neuralNetwork: NeuralNetworkWithInput, neuronsSampler: NeuronsSampler, kNeighbours: Int)","we.rashchenko.networks.builders.NeuralNetworkIn2DBuilderFixed.NeuralNetworkIn2DBuilderFixed"]},{"name":"fun NeuronsManager()","description":"we.rashchenko.neurons.NeuronsManager.NeuronsManager","location":"chnn-library/we.rashchenko.neurons/-neurons-manager/-neurons-manager.html","searchKeys":["NeuronsManager","fun NeuronsManager()","we.rashchenko.neurons.NeuronsManager.NeuronsManager"]},{"name":"fun RandomPositionSampler()","description":"we.rashchenko.utils.RandomPositionSampler.RandomPositionSampler","location":"chnn-library/we.rashchenko.utils/-random-position-sampler/-random-position-sampler.html","searchKeys":["RandomPositionSampler","fun RandomPositionSampler()","we.rashchenko.utils.RandomPositionSampler.RandomPositionSampler"]},{"name":"fun SamplerStats(score: Double, chooseProbability: Double, population: Int)","description":"we.rashchenko.neurons.SamplerStats.SamplerStats","location":"chnn-library/we.rashchenko.neurons/-sampler-stats/-sampler-stats.html","searchKeys":["SamplerStats","fun SamplerStats(score: Double, chooseProbability: Double, population: Int)","we.rashchenko.neurons.SamplerStats.SamplerStats"]},{"name":"fun SimpleEnvironment(tickPeriod: Int)","description":"we.rashchenko.environments.SimpleEnvironment.SimpleEnvironment","location":"chnn-library/we.rashchenko.environments/-simple-environment/-simple-environment.html","searchKeys":["SimpleEnvironment","fun SimpleEnvironment(tickPeriod: Int)","we.rashchenko.environments.SimpleEnvironment.SimpleEnvironment"]},{"name":"fun StochasticNeuralNetwork()","description":"we.rashchenko.networks.StochasticNeuralNetwork.StochasticNeuralNetwork","location":"chnn-library/we.rashchenko.networks/-stochastic-neural-network/-stochastic-neural-network.html","searchKeys":["StochasticNeuralNetwork","fun StochasticNeuralNetwork()","we.rashchenko.networks.StochasticNeuralNetwork.StochasticNeuralNetwork"]},{"name":"fun SupervisedNeuron(externalActivity: HiddenActivity, baseNeuron: Neuron)","description":"we.rashchenko.neurons.inputs.SupervisedNeuron.SupervisedNeuron","location":"chnn-library/we.rashchenko.neurons.inputs/-supervised-neuron/-supervised-neuron.html","searchKeys":["SupervisedNeuron","fun SupervisedNeuron(externalActivity: HiddenActivity, baseNeuron: Neuron)","we.rashchenko.neurons.inputs.SupervisedNeuron.SupervisedNeuron"]},{"name":"fun TimeController()","description":"we.rashchenko.networks.controllers.TimeController.TimeController","location":"chnn-library/we.rashchenko.networks.controllers/-time-controller/-time-controller.html","searchKeys":["TimeController","fun TimeController()","we.rashchenko.networks.controllers.TimeController.TimeController"]},{"name":"fun Vector2(x: Float, y: Float)","description":"we.rashchenko.utils.Vector2.Vector2","location":"chnn-library/we.rashchenko.utils/-vector2/-vector2.html","searchKeys":["Vector2","fun Vector2(x: Float, y: Float)","we.rashchenko.utils.Vector2.Vector2"]},{"name":"fun WorstN(n: Int, comparator: Comparator<T>)","description":"we.rashchenko.utils.collections.WorstN.WorstN","location":"chnn-library/we.rashchenko.utils.collections/-worst-n/-worst-n.html","searchKeys":["WorstN","fun WorstN(n: Int, comparator: Comparator<T>)","we.rashchenko.utils.collections.WorstN.WorstN"]},{"name":"fun WorstNNeuronIDs(n: Int)","description":"we.rashchenko.utils.collections.WorstNNeuronIDs.WorstNNeuronIDs","location":"chnn-library/we.rashchenko.utils.collections/-worst-n-neuron-i-ds/-worst-n-neuron-i-ds.html","searchKeys":["WorstNNeuronIDs","fun WorstNNeuronIDs(n: Int)","we.rashchenko.utils.collections.WorstNNeuronIDs.WorstNNeuronIDs"]},{"name":"fun add(sampler: NeuronsSampler)","description":"we.rashchenko.neurons.NeuronsManager.add","location":"chnn-library/we.rashchenko.neurons/-neurons-manager/add.html","searchKeys":["add","fun add(sampler: NeuronsSampler)","we.rashchenko.neurons.NeuronsManager.add"]},{"name":"fun connectNew(newPosition: Vector2, allPositions: Collection<Vector2>): Collection<Vector2>","description":"we.rashchenko.utils.KNearestVectorsConnectionSampler.connectNew","location":"chnn-library/we.rashchenko.utils/-k-nearest-vectors-connection-sampler/connect-new.html","searchKeys":["connectNew","fun connectNew(newPosition: Vector2, allPositions: Collection<Vector2>): Collection<Vector2>","we.rashchenko.utils.KNearestVectorsConnectionSampler.connectNew"]},{"name":"fun dst(v: Vector2): Float","description":"we.rashchenko.utils.Vector2.dst","location":"chnn-library/we.rashchenko.utils/-vector2/dst.html","searchKeys":["dst","fun dst(v: Vector2): Float","we.rashchenko.utils.Vector2.dst"]},{"name":"fun getExternalFeedback(neuronID: Int): Feedback?","description":"we.rashchenko.networks.ControlledNeuralNetwork.getExternalFeedback","location":"chnn-library/we.rashchenko.networks/-controlled-neural-network/get-external-feedback.html","searchKeys":["getExternalFeedback","fun getExternalFeedback(neuronID: Int): Feedback?","we.rashchenko.networks.ControlledNeuralNetwork.getExternalFeedback"]},{"name":"fun getInternalFeedback(neuronID: Int): Feedback?","description":"we.rashchenko.networks.ControlledNeuralNetwork.getInternalFeedback","location":"chnn-library/we.rashchenko.networks/-controlled-neural-network/get-internal-feedback.html","searchKeys":["getInternalFeedback","fun getInternalFeedback(neuronID: Int): Feedback?","we.rashchenko.networks.ControlledNeuralNetwork.getInternalFeedback"]},{"name":"fun getPosition(neuronID: Int): Vector2?","description":"we.rashchenko.networks.builders.NeuralNetworkIn2DBuilderFixed.getPosition","location":"chnn-library/we.rashchenko.networks.builders/-neural-network-in2-d-builder-fixed/get-position.html","searchKeys":["getPosition","fun getPosition(neuronID: Int): Vector2?","we.rashchenko.networks.builders.NeuralNetworkIn2DBuilderFixed.getPosition"]},{"name":"fun getSamplerStats(): Map<NeuronsSampler, SamplerStats>","description":"we.rashchenko.neurons.NeuronsManager.getSamplerStats","location":"chnn-library/we.rashchenko.neurons/-neurons-manager/get-sampler-stats.html","searchKeys":["getSamplerStats","fun getSamplerStats(): Map<NeuronsSampler, SamplerStats>","we.rashchenko.neurons.NeuronsManager.getSamplerStats"]},{"name":"fun getSummary(stats: Map<NeuronsSampler, SamplerStats>): String","description":"we.rashchenko.neurons.getSummary","location":"chnn-library/we.rashchenko.neurons/get-summary.html","searchKeys":["getSummary","fun getSummary(stats: Map<NeuronsSampler, SamplerStats>): String","we.rashchenko.neurons.getSummary"]},{"name":"fun len(): Float","description":"we.rashchenko.utils.Vector2.len","location":"chnn-library/we.rashchenko.utils/-vector2/len.html","searchKeys":["len","fun len(): Float","we.rashchenko.utils.Vector2.len"]},{"name":"fun next(): Int","description":"we.rashchenko.utils.IDsGenerator.next","location":"chnn-library/we.rashchenko.utils/-i-ds-generator/next.html","searchKeys":["next","fun next(): Int","we.rashchenko.utils.IDsGenerator.next"]},{"name":"fun normalize(): Vector2","description":"we.rashchenko.utils.Vector2.normalize","location":"chnn-library/we.rashchenko.utils/-vector2/normalize.html","searchKeys":["normalize","fun normalize(): Vector2","we.rashchenko.utils.Vector2.normalize"]},{"name":"fun scl(k: Float): Vector2","description":"we.rashchenko.utils.Vector2.scl","location":"chnn-library/we.rashchenko.utils/-vector2/scl.html","searchKeys":["scl","fun scl(k: Float): Vector2","we.rashchenko.utils.Vector2.scl"]},{"name":"fun scl(v: Vector2): Vector2","description":"we.rashchenko.utils.Vector2.scl","location":"chnn-library/we.rashchenko.utils/-vector2/scl.html","searchKeys":["scl","fun scl(v: Vector2): Vector2","we.rashchenko.utils.Vector2.scl"]},{"name":"fun softmax(values: List<Double>): List<Double>","description":"we.rashchenko.utils.softmax","location":"chnn-library/we.rashchenko.utils/softmax.html","searchKeys":["softmax","fun softmax(values: List<Double>): List<Double>","we.rashchenko.utils.softmax"]},{"name":"fun update(newValue: Double)","description":"we.rashchenko.utils.ExponentialMovingAverage.update","location":"chnn-library/we.rashchenko.utils/-exponential-moving-average/update.html","searchKeys":["update","fun update(newValue: Double)","we.rashchenko.utils.ExponentialMovingAverage.update"]},{"name":"fun update(newValue: Double)","description":"we.rashchenko.utils.ExponentialMovingAverageHotStart.update","location":"chnn-library/we.rashchenko.utils/-exponential-moving-average-hot-start/update.html","searchKeys":["update","fun update(newValue: Double)","we.rashchenko.utils.ExponentialMovingAverageHotStart.update"]},{"name":"interface Activity","description":"we.rashchenko.base.Activity","location":"chnn-library/we.rashchenko.base/-activity/index.html","searchKeys":["Activity","interface Activity","we.rashchenko.base.Activity"]},{"name":"interface Environment : Ticking, ObservableActivities","description":"we.rashchenko.environments.Environment","location":"chnn-library/we.rashchenko.environments/-environment/index.html","searchKeys":["Environment","interface Environment : Ticking, ObservableActivities","we.rashchenko.environments.Environment"]},{"name":"interface HiddenActivity : Activity","description":"we.rashchenko.base.HiddenActivity","location":"chnn-library/we.rashchenko.base/-hidden-activity/index.html","searchKeys":["HiddenActivity","interface HiddenActivity : Activity","we.rashchenko.base.HiddenActivity"]},{"name":"interface InputNeuron : Neuron","description":"we.rashchenko.neurons.inputs.InputNeuron","location":"chnn-library/we.rashchenko.neurons.inputs/-input-neuron/index.html","searchKeys":["InputNeuron","interface InputNeuron : Neuron","we.rashchenko.neurons.inputs.InputNeuron"]},{"name":"interface InputOutputEnvironment : Environment","description":"we.rashchenko.environments.InputOutputEnvironment","location":"chnn-library/we.rashchenko.environments/-input-output-environment/index.html","searchKeys":["InputOutputEnvironment","interface InputOutputEnvironment : Environment","we.rashchenko.environments.InputOutputEnvironment"]},{"name":"interface NeuralNetwork : Ticking","description":"we.rashchenko.networks.NeuralNetwork","location":"chnn-library/we.rashchenko.networks/-neural-network/index.html","searchKeys":["NeuralNetwork","interface NeuralNetwork : Ticking","we.rashchenko.networks.NeuralNetwork"]},{"name":"interface NeuralNetworkBuilder","description":"we.rashchenko.networks.builders.NeuralNetworkBuilder","location":"chnn-library/we.rashchenko.networks.builders/-neural-network-builder/index.html","searchKeys":["NeuralNetworkBuilder","interface NeuralNetworkBuilder","we.rashchenko.networks.builders.NeuralNetworkBuilder"]},{"name":"interface NeuralNetworkController","description":"we.rashchenko.networks.controllers.NeuralNetworkController","location":"chnn-library/we.rashchenko.networks.controllers/-neural-network-controller/index.html","searchKeys":["NeuralNetworkController","interface NeuralNetworkController","we.rashchenko.networks.controllers.NeuralNetworkController"]},{"name":"interface NeuralNetworkWithInput : NeuralNetwork","description":"we.rashchenko.networks.NeuralNetworkWithInput","location":"chnn-library/we.rashchenko.networks/-neural-network-with-input/index.html","searchKeys":["NeuralNetworkWithInput","interface NeuralNetworkWithInput : NeuralNetwork","we.rashchenko.networks.NeuralNetworkWithInput"]},{"name":"interface NeuralNetworkWithInputBuilder : NeuralNetworkBuilder","description":"we.rashchenko.networks.builders.NeuralNetworkWithInputBuilder","location":"chnn-library/we.rashchenko.networks.builders/-neural-network-with-input-builder/index.html","searchKeys":["NeuralNetworkWithInputBuilder","interface NeuralNetworkWithInputBuilder : NeuralNetworkBuilder","we.rashchenko.networks.builders.NeuralNetworkWithInputBuilder"]},{"name":"interface Neuron : Activity","description":"we.rashchenko.neurons.Neuron","location":"chnn-library/we.rashchenko.neurons/-neuron/index.html","searchKeys":["Neuron","interface Neuron : Activity","we.rashchenko.neurons.Neuron"]},{"name":"interface NeuronsSampler","description":"we.rashchenko.neurons.NeuronsSampler","location":"chnn-library/we.rashchenko.neurons/-neurons-sampler/index.html","searchKeys":["NeuronsSampler","interface NeuronsSampler","we.rashchenko.neurons.NeuronsSampler"]},{"name":"interface ObservableActivities","description":"we.rashchenko.base.ObservableActivities","location":"chnn-library/we.rashchenko.base/-observable-activities/index.html","searchKeys":["ObservableActivities","interface ObservableActivities","we.rashchenko.base.ObservableActivities"]},{"name":"interface Ticking","description":"we.rashchenko.base.Ticking","location":"chnn-library/we.rashchenko.base/-ticking/index.html","searchKeys":["Ticking","interface Ticking","we.rashchenko.base.Ticking"]},{"name":"object Companion","description":"we.rashchenko.base.Feedback.Companion","location":"chnn-library/we.rashchenko.base/-feedback/-companion/index.html","searchKeys":["Companion","object Companion","we.rashchenko.base.Feedback.Companion"]},{"name":"object Companion","description":"we.rashchenko.utils.Vector2.Companion","location":"chnn-library/we.rashchenko.utils/-vector2/-companion/index.html","searchKeys":["Companion","object Companion","we.rashchenko.utils.Vector2.Companion"]},{"name":"open class AlwaysSorted<T>(comparator: Comparator<T>) : MutableList<T> ","description":"we.rashchenko.utils.collections.AlwaysSorted","location":"chnn-library/we.rashchenko.utils.collections/-always-sorted/index.html","searchKeys":["AlwaysSorted","open class AlwaysSorted<T>(comparator: Comparator<T>) : MutableList<T> ","we.rashchenko.utils.collections.AlwaysSorted"]},{"name":"open class WorstN<T>(n: Int, comparator: Comparator<T>) : AlwaysSorted<T> ","description":"we.rashchenko.utils.collections.WorstN","location":"chnn-library/we.rashchenko.utils.collections/-worst-n/index.html","searchKeys":["WorstN","open class WorstN<T>(n: Int, comparator: Comparator<T>) : AlwaysSorted<T> ","we.rashchenko.utils.collections.WorstN"]},{"name":"open operator override fun compareTo(other: Feedback): Int","description":"we.rashchenko.base.Feedback.compareTo","location":"chnn-library/we.rashchenko.base/-feedback/compare-to.html","searchKeys":["compareTo","open operator override fun compareTo(other: Feedback): Int","we.rashchenko.base.Feedback.compareTo"]},{"name":"open operator override fun contains(element: T): Boolean","description":"we.rashchenko.utils.collections.AlwaysSorted.contains","location":"chnn-library/we.rashchenko.utils.collections/-always-sorted/contains.html","searchKeys":["contains","open operator override fun contains(element: T): Boolean","we.rashchenko.utils.collections.AlwaysSorted.contains"]},{"name":"open operator override fun get(index: Int): T","description":"we.rashchenko.utils.collections.AlwaysSorted.get","location":"chnn-library/we.rashchenko.utils.collections/-always-sorted/get.html","searchKeys":["get","open operator override fun get(index: Int): T","we.rashchenko.utils.collections.AlwaysSorted.get"]},{"name":"open operator override fun hasNext(): Boolean","description":"we.rashchenko.utils.RandomPositionSampler.hasNext","location":"chnn-library/we.rashchenko.utils/-random-position-sampler/has-next.html","searchKeys":["hasNext","open operator override fun hasNext(): Boolean","we.rashchenko.utils.RandomPositionSampler.hasNext"]},{"name":"open operator override fun iterator(): MutableIterator<T>","description":"we.rashchenko.utils.collections.AlwaysSorted.iterator","location":"chnn-library/we.rashchenko.utils.collections/-always-sorted/iterator.html","searchKeys":["iterator","open operator override fun iterator(): MutableIterator<T>","we.rashchenko.utils.collections.AlwaysSorted.iterator"]},{"name":"open operator override fun next(): Vector2","description":"we.rashchenko.utils.RandomPositionSampler.next","location":"chnn-library/we.rashchenko.utils/-random-position-sampler/next.html","searchKeys":["next","open operator override fun next(): Vector2","we.rashchenko.utils.RandomPositionSampler.next"]},{"name":"open operator override fun set(index: Int, element: T): T","description":"we.rashchenko.utils.collections.AlwaysSorted.set","location":"chnn-library/we.rashchenko.utils.collections/-always-sorted/set.html","searchKeys":["set","open operator override fun set(index: Int, element: T): T","we.rashchenko.utils.collections.AlwaysSorted.set"]},{"name":"open override fun add(element: T): Boolean","description":"we.rashchenko.utils.collections.AlwaysSorted.add","location":"chnn-library/we.rashchenko.utils.collections/-always-sorted/add.html","searchKeys":["add","open override fun add(element: T): Boolean","we.rashchenko.utils.collections.AlwaysSorted.add"]},{"name":"open override fun add(element: T): Boolean","description":"we.rashchenko.utils.collections.WorstN.add","location":"chnn-library/we.rashchenko.utils.collections/-worst-n/add.html","searchKeys":["add","open override fun add(element: T): Boolean","we.rashchenko.utils.collections.WorstN.add"]},{"name":"open override fun add(index: Int, element: T)","description":"we.rashchenko.utils.collections.AlwaysSorted.add","location":"chnn-library/we.rashchenko.utils.collections/-always-sorted/add.html","searchKeys":["add","open override fun add(index: Int, element: T)","we.rashchenko.utils.collections.AlwaysSorted.add"]},{"name":"open override fun add(neuron: Neuron): Int","description":"we.rashchenko.networks.ControlledNeuralNetwork.add","location":"chnn-library/we.rashchenko.networks/-controlled-neural-network/add.html","searchKeys":["add","open override fun add(neuron: Neuron): Int","we.rashchenko.networks.ControlledNeuralNetwork.add"]},{"name":"open override fun add(neuron: Neuron): Int","description":"we.rashchenko.networks.StochasticNeuralNetwork.add","location":"chnn-library/we.rashchenko.networks/-stochastic-neural-network/add.html","searchKeys":["add","open override fun add(neuron: Neuron): Int","we.rashchenko.networks.StochasticNeuralNetwork.add"]},{"name":"open override fun addAll(elements: Collection<T>): Boolean","description":"we.rashchenko.utils.collections.AlwaysSorted.addAll","location":"chnn-library/we.rashchenko.utils.collections/-always-sorted/add-all.html","searchKeys":["addAll","open override fun addAll(elements: Collection<T>): Boolean","we.rashchenko.utils.collections.AlwaysSorted.addAll"]},{"name":"open override fun addAll(index: Int, elements: Collection<T>): Boolean","description":"we.rashchenko.utils.collections.AlwaysSorted.addAll","location":"chnn-library/we.rashchenko.utils.collections/-always-sorted/add-all.html","searchKeys":["addAll","open override fun addAll(index: Int, elements: Collection<T>): Boolean","we.rashchenko.utils.collections.AlwaysSorted.addAll"]},{"name":"open override fun addConnection(fromNeuronID: Int, toNeuronID: Int): Boolean","description":"we.rashchenko.networks.StochasticNeuralNetwork.addConnection","location":"chnn-library/we.rashchenko.networks/-stochastic-neural-network/add-connection.html","searchKeys":["addConnection","open override fun addConnection(fromNeuronID: Int, toNeuronID: Int): Boolean","we.rashchenko.networks.StochasticNeuralNetwork.addConnection"]},{"name":"open override fun addInputNeuron(neuron: InputNeuron): Int","description":"we.rashchenko.networks.ControlledNeuralNetwork.addInputNeuron","location":"chnn-library/we.rashchenko.networks/-controlled-neural-network/add-input-neuron.html","searchKeys":["addInputNeuron","open override fun addInputNeuron(neuron: InputNeuron): Int","we.rashchenko.networks.ControlledNeuralNetwork.addInputNeuron"]},{"name":"open override fun addInputNeuron(neuron: InputNeuron): Int","description":"we.rashchenko.networks.StochasticNeuralNetwork.addInputNeuron","location":"chnn-library/we.rashchenko.networks/-stochastic-neural-network/add-input-neuron.html","searchKeys":["addInputNeuron","open override fun addInputNeuron(neuron: InputNeuron): Int","we.rashchenko.networks.StochasticNeuralNetwork.addInputNeuron"]},{"name":"open override fun addInputOutputEnvironment(environment: InputOutputEnvironment): Int","description":"we.rashchenko.networks.builders.NeuralNetworkIn2DBuilderFixed.addInputOutputEnvironment","location":"chnn-library/we.rashchenko.networks.builders/-neural-network-in2-d-builder-fixed/add-input-output-environment.html","searchKeys":["addInputOutputEnvironment","open override fun addInputOutputEnvironment(environment: InputOutputEnvironment): Int","we.rashchenko.networks.builders.NeuralNetworkIn2DBuilderFixed.addInputOutputEnvironment"]},{"name":"open override fun addNeurons(n: Int): List<Int>","description":"we.rashchenko.networks.builders.NeuralNetworkIn2DBuilderFixed.addNeurons","location":"chnn-library/we.rashchenko.networks.builders/-neural-network-in2-d-builder-fixed/add-neurons.html","searchKeys":["addNeurons","open override fun addNeurons(n: Int): List<Int>","we.rashchenko.networks.builders.NeuralNetworkIn2DBuilderFixed.addNeurons"]},{"name":"open override fun clear()","description":"we.rashchenko.utils.collections.AlwaysSorted.clear","location":"chnn-library/we.rashchenko.utils.collections/-always-sorted/clear.html","searchKeys":["clear","open override fun clear()","we.rashchenko.utils.collections.AlwaysSorted.clear"]},{"name":"open override fun containsAll(elements: Collection<T>): Boolean","description":"we.rashchenko.utils.collections.AlwaysSorted.containsAll","location":"chnn-library/we.rashchenko.utils.collections/-always-sorted/contains-all.html","searchKeys":["containsAll","open override fun containsAll(elements: Collection<T>): Boolean","we.rashchenko.utils.collections.AlwaysSorted.containsAll"]},{"name":"open override fun forgetSource(sourceId: Int)","description":"we.rashchenko.neurons.ControlledNeuron.forgetSource","location":"chnn-library/we.rashchenko.neurons/-controlled-neuron/forget-source.html","searchKeys":["forgetSource","open override fun forgetSource(sourceId: Int)","we.rashchenko.neurons.ControlledNeuron.forgetSource"]},{"name":"open override fun forgetSource(sourceId: Int)","description":"we.rashchenko.neurons.inputs.MirroringNeuron.forgetSource","location":"chnn-library/we.rashchenko.neurons.inputs/-mirroring-neuron/forget-source.html","searchKeys":["forgetSource","open override fun forgetSource(sourceId: Int)","we.rashchenko.neurons.inputs.MirroringNeuron.forgetSource"]},{"name":"open override fun forgetSource(sourceId: Int)","description":"we.rashchenko.neurons.inputs.SupervisedNeuron.forgetSource","location":"chnn-library/we.rashchenko.neurons.inputs/-supervised-neuron/forget-source.html","searchKeys":["forgetSource","open override fun forgetSource(sourceId: Int)","we.rashchenko.neurons.inputs.SupervisedNeuron.forgetSource"]},{"name":"open override fun getControllerFeedbacks(neurons: List<ControlledNeuron>): List<Feedback>","description":"we.rashchenko.networks.controllers.ActivityController.getControllerFeedbacks","location":"chnn-library/we.rashchenko.networks.controllers/-activity-controller/get-controller-feedbacks.html","searchKeys":["getControllerFeedbacks","open override fun getControllerFeedbacks(neurons: List<ControlledNeuron>): List<Feedback>","we.rashchenko.networks.controllers.ActivityController.getControllerFeedbacks"]},{"name":"open override fun getControllerFeedbacks(neurons: List<ControlledNeuron>): List<Feedback>","description":"we.rashchenko.networks.controllers.ComplexController.getControllerFeedbacks","location":"chnn-library/we.rashchenko.networks.controllers/-complex-controller/get-controller-feedbacks.html","searchKeys":["getControllerFeedbacks","open override fun getControllerFeedbacks(neurons: List<ControlledNeuron>): List<Feedback>","we.rashchenko.networks.controllers.ComplexController.getControllerFeedbacks"]},{"name":"open override fun getControllerFeedbacks(neurons: List<ControlledNeuron>): List<Feedback>","description":"we.rashchenko.networks.controllers.TimeController.getControllerFeedbacks","location":"chnn-library/we.rashchenko.networks.controllers/-time-controller/get-controller-feedbacks.html","searchKeys":["getControllerFeedbacks","open override fun getControllerFeedbacks(neurons: List<ControlledNeuron>): List<Feedback>","we.rashchenko.networks.controllers.TimeController.getControllerFeedbacks"]},{"name":"open override fun getEnvironmentOutputNeuronIDs(environmentID: Int): List<Int>?","description":"we.rashchenko.networks.builders.NeuralNetworkIn2DBuilderFixed.getEnvironmentOutputNeuronIDs","location":"chnn-library/we.rashchenko.networks.builders/-neural-network-in2-d-builder-fixed/get-environment-output-neuron-i-ds.html","searchKeys":["getEnvironmentOutputNeuronIDs","open override fun getEnvironmentOutputNeuronIDs(environmentID: Int): List<Int>?","we.rashchenko.networks.builders.NeuralNetworkIn2DBuilderFixed.getEnvironmentOutputNeuronIDs"]},{"name":"open override fun getFeedback(neuronID: Int): Feedback?","description":"we.rashchenko.networks.ControlledNeuralNetwork.getFeedback","location":"chnn-library/we.rashchenko.networks/-controlled-neural-network/get-feedback.html","searchKeys":["getFeedback","open override fun getFeedback(neuronID: Int): Feedback?","we.rashchenko.networks.ControlledNeuralNetwork.getFeedback"]},{"name":"open override fun getFeedback(neuronID: Int): Feedback?","description":"we.rashchenko.networks.StochasticNeuralNetwork.getFeedback","location":"chnn-library/we.rashchenko.networks/-stochastic-neural-network/get-feedback.html","searchKeys":["getFeedback","open override fun getFeedback(neuronID: Int): Feedback?","we.rashchenko.networks.StochasticNeuralNetwork.getFeedback"]},{"name":"open override fun getFeedback(sourceId: Int): Feedback","description":"we.rashchenko.neurons.ControlledNeuron.getFeedback","location":"chnn-library/we.rashchenko.neurons/-controlled-neuron/get-feedback.html","searchKeys":["getFeedback","open override fun getFeedback(sourceId: Int): Feedback","we.rashchenko.neurons.ControlledNeuron.getFeedback"]},{"name":"open override fun getFeedback(sourceId: Int): Feedback","description":"we.rashchenko.neurons.inputs.MirroringNeuron.getFeedback","location":"chnn-library/we.rashchenko.neurons.inputs/-mirroring-neuron/get-feedback.html","searchKeys":["getFeedback","open override fun getFeedback(sourceId: Int): Feedback","we.rashchenko.neurons.inputs.MirroringNeuron.getFeedback"]},{"name":"open override fun getFeedback(sourceId: Int): Feedback","description":"we.rashchenko.neurons.inputs.SupervisedNeuron.getFeedback","location":"chnn-library/we.rashchenko.neurons.inputs/-supervised-neuron/get-feedback.html","searchKeys":["getFeedback","open override fun getFeedback(sourceId: Int): Feedback","we.rashchenko.neurons.inputs.SupervisedNeuron.getFeedback"]},{"name":"open override fun getInputNeuron(neuronID: Int): InputNeuron?","description":"we.rashchenko.networks.StochasticNeuralNetwork.getInputNeuron","location":"chnn-library/we.rashchenko.networks/-stochastic-neural-network/get-input-neuron.html","searchKeys":["getInputNeuron","open override fun getInputNeuron(neuronID: Int): InputNeuron?","we.rashchenko.networks.StochasticNeuralNetwork.getInputNeuron"]},{"name":"open override fun getInternalFeedback(): Feedback","description":"we.rashchenko.neurons.inputs.MirroringNeuron.getInternalFeedback","location":"chnn-library/we.rashchenko.neurons.inputs/-mirroring-neuron/get-internal-feedback.html","searchKeys":["getInternalFeedback","open override fun getInternalFeedback(): Feedback","we.rashchenko.neurons.inputs.MirroringNeuron.getInternalFeedback"]},{"name":"open override fun getInternalFeedback(): Feedback","description":"we.rashchenko.neurons.inputs.SupervisedNeuron.getInternalFeedback","location":"chnn-library/we.rashchenko.neurons.inputs/-supervised-neuron/get-internal-feedback.html","searchKeys":["getInternalFeedback","open override fun getInternalFeedback(): Feedback","we.rashchenko.neurons.inputs.SupervisedNeuron.getInternalFeedback"]},{"name":"open override fun getNeuron(neuronID: Int): Neuron?","description":"we.rashchenko.networks.StochasticNeuralNetwork.getNeuron","location":"chnn-library/we.rashchenko.networks/-stochastic-neural-network/get-neuron.html","searchKeys":["getNeuron","open override fun getNeuron(neuronID: Int): Neuron?","we.rashchenko.networks.StochasticNeuralNetwork.getNeuron"]},{"name":"open override fun indexOf(element: T): Int","description":"we.rashchenko.utils.collections.AlwaysSorted.indexOf","location":"chnn-library/we.rashchenko.utils.collections/-always-sorted/index-of.html","searchKeys":["indexOf","open override fun indexOf(element: T): Int","we.rashchenko.utils.collections.AlwaysSorted.indexOf"]},{"name":"open override fun isEmpty(): Boolean","description":"we.rashchenko.utils.collections.AlwaysSorted.isEmpty","location":"chnn-library/we.rashchenko.utils.collections/-always-sorted/is-empty.html","searchKeys":["isEmpty","open override fun isEmpty(): Boolean","we.rashchenko.utils.collections.AlwaysSorted.isEmpty"]},{"name":"open override fun lastIndexOf(element: T): Int","description":"we.rashchenko.utils.collections.AlwaysSorted.lastIndexOf","location":"chnn-library/we.rashchenko.utils.collections/-always-sorted/last-index-of.html","searchKeys":["lastIndexOf","open override fun lastIndexOf(element: T): Int","we.rashchenko.utils.collections.AlwaysSorted.lastIndexOf"]},{"name":"open override fun listIterator(): MutableListIterator<T>","description":"we.rashchenko.utils.collections.AlwaysSorted.listIterator","location":"chnn-library/we.rashchenko.utils.collections/-always-sorted/list-iterator.html","searchKeys":["listIterator","open override fun listIterator(): MutableListIterator<T>","we.rashchenko.utils.collections.AlwaysSorted.listIterator"]},{"name":"open override fun listIterator(index: Int): MutableListIterator<T>","description":"we.rashchenko.utils.collections.AlwaysSorted.listIterator","location":"chnn-library/we.rashchenko.utils.collections/-always-sorted/list-iterator.html","searchKeys":["listIterator","open override fun listIterator(index: Int): MutableListIterator<T>","we.rashchenko.utils.collections.AlwaysSorted.listIterator"]},{"name":"open override fun next(id: Int): Neuron","description":"we.rashchenko.neurons.NeuronsManager.next","location":"chnn-library/we.rashchenko.neurons/-neurons-manager/next.html","searchKeys":["next","open override fun next(id: Int): Neuron","we.rashchenko.neurons.NeuronsManager.next"]},{"name":"open override fun remove(element: T): Boolean","description":"we.rashchenko.utils.collections.AlwaysSorted.remove","location":"chnn-library/we.rashchenko.utils.collections/-always-sorted/remove.html","searchKeys":["remove","open override fun remove(element: T): Boolean","we.rashchenko.utils.collections.AlwaysSorted.remove"]},{"name":"open override fun remove(neuronID: Int): Boolean","description":"we.rashchenko.networks.ControlledNeuralNetwork.remove","location":"chnn-library/we.rashchenko.networks/-controlled-neural-network/remove.html","searchKeys":["remove","open override fun remove(neuronID: Int): Boolean","we.rashchenko.networks.ControlledNeuralNetwork.remove"]},{"name":"open override fun remove(neuronID: Int): Boolean","description":"we.rashchenko.networks.StochasticNeuralNetwork.remove","location":"chnn-library/we.rashchenko.networks/-stochastic-neural-network/remove.html","searchKeys":["remove","open override fun remove(neuronID: Int): Boolean","we.rashchenko.networks.StochasticNeuralNetwork.remove"]},{"name":"open override fun remove(neuronID: Int): Boolean","description":"we.rashchenko.networks.builders.NeuralNetworkIn2DBuilderFixed.remove","location":"chnn-library/we.rashchenko.networks.builders/-neural-network-in2-d-builder-fixed/remove.html","searchKeys":["remove","open override fun remove(neuronID: Int): Boolean","we.rashchenko.networks.builders.NeuralNetworkIn2DBuilderFixed.remove"]},{"name":"open override fun removeAll(elements: Collection<T>): Boolean","description":"we.rashchenko.utils.collections.AlwaysSorted.removeAll","location":"chnn-library/we.rashchenko.utils.collections/-always-sorted/remove-all.html","searchKeys":["removeAll","open override fun removeAll(elements: Collection<T>): Boolean","we.rashchenko.utils.collections.AlwaysSorted.removeAll"]},{"name":"open override fun removeAt(index: Int): T","description":"we.rashchenko.utils.collections.AlwaysSorted.removeAt","location":"chnn-library/we.rashchenko.utils.collections/-always-sorted/remove-at.html","searchKeys":["removeAt","open override fun removeAt(index: Int): T","we.rashchenko.utils.collections.AlwaysSorted.removeAt"]},{"name":"open override fun removeConnection(fromNeuronID: Int, toNeuronID: Int): Boolean","description":"we.rashchenko.networks.StochasticNeuralNetwork.removeConnection","location":"chnn-library/we.rashchenko.networks/-stochastic-neural-network/remove-connection.html","searchKeys":["removeConnection","open override fun removeConnection(fromNeuronID: Int, toNeuronID: Int): Boolean","we.rashchenko.networks.StochasticNeuralNetwork.removeConnection"]},{"name":"open override fun reportDeath(id: Int)","description":"we.rashchenko.neurons.NeuronsManager.reportDeath","location":"chnn-library/we.rashchenko.neurons/-neurons-manager/report-death.html","searchKeys":["reportDeath","open override fun reportDeath(id: Int)","we.rashchenko.neurons.NeuronsManager.reportDeath"]},{"name":"open override fun reportFeedback(id: Int, feedback: Feedback)","description":"we.rashchenko.neurons.NeuronsManager.reportFeedback","location":"chnn-library/we.rashchenko.neurons/-neurons-manager/report-feedback.html","searchKeys":["reportFeedback","open override fun reportFeedback(id: Int, feedback: Feedback)","we.rashchenko.neurons.NeuronsManager.reportFeedback"]},{"name":"open override fun retainAll(elements: Collection<T>): Boolean","description":"we.rashchenko.utils.collections.AlwaysSorted.retainAll","location":"chnn-library/we.rashchenko.utils.collections/-always-sorted/retain-all.html","searchKeys":["retainAll","open override fun retainAll(elements: Collection<T>): Boolean","we.rashchenko.utils.collections.AlwaysSorted.retainAll"]},{"name":"open override fun subList(fromIndex: Int, toIndex: Int): MutableList<T>","description":"we.rashchenko.utils.collections.AlwaysSorted.subList","location":"chnn-library/we.rashchenko.utils.collections/-always-sorted/sub-list.html","searchKeys":["subList","open override fun subList(fromIndex: Int, toIndex: Int): MutableList<T>","we.rashchenko.utils.collections.AlwaysSorted.subList"]},{"name":"open override fun tick()","description":"we.rashchenko.environments.SimpleEnvironment.tick","location":"chnn-library/we.rashchenko.environments/-simple-environment/tick.html","searchKeys":["tick","open override fun tick()","we.rashchenko.environments.SimpleEnvironment.tick"]},{"name":"open override fun tick()","description":"we.rashchenko.networks.ControlledNeuralNetwork.tick","location":"chnn-library/we.rashchenko.networks/-controlled-neural-network/tick.html","searchKeys":["tick","open override fun tick()","we.rashchenko.networks.ControlledNeuralNetwork.tick"]},{"name":"open override fun tick()","description":"we.rashchenko.networks.StochasticNeuralNetwork.tick","location":"chnn-library/we.rashchenko.networks/-stochastic-neural-network/tick.html","searchKeys":["tick","open override fun tick()","we.rashchenko.networks.StochasticNeuralNetwork.tick"]},{"name":"open override fun tick()","description":"we.rashchenko.networks.builders.Evolution.tick","location":"chnn-library/we.rashchenko.networks.builders/-evolution/tick.html","searchKeys":["tick","open override fun tick()","we.rashchenko.networks.builders.Evolution.tick"]},{"name":"open override fun toString(): String","description":"we.rashchenko.utils.ExponentialMovingAverage.toString","location":"chnn-library/we.rashchenko.utils/-exponential-moving-average/to-string.html","searchKeys":["toString","open override fun toString(): String","we.rashchenko.utils.ExponentialMovingAverage.toString"]},{"name":"open override fun toString(): String","description":"we.rashchenko.utils.ExponentialMovingAverageHotStart.toString","location":"chnn-library/we.rashchenko.utils/-exponential-moving-average-hot-start/to-string.html","searchKeys":["toString","open override fun toString(): String","we.rashchenko.utils.ExponentialMovingAverageHotStart.toString"]},{"name":"open override fun touch(sourceId: Int, timeStep: Long)","description":"we.rashchenko.neurons.ControlledNeuron.touch","location":"chnn-library/we.rashchenko.neurons/-controlled-neuron/touch.html","searchKeys":["touch","open override fun touch(sourceId: Int, timeStep: Long)","we.rashchenko.neurons.ControlledNeuron.touch"]},{"name":"open override fun touch(sourceId: Int, timeStep: Long)","description":"we.rashchenko.neurons.inputs.MirroringNeuron.touch","location":"chnn-library/we.rashchenko.neurons.inputs/-mirroring-neuron/touch.html","searchKeys":["touch","open override fun touch(sourceId: Int, timeStep: Long)","we.rashchenko.neurons.inputs.MirroringNeuron.touch"]},{"name":"open override fun touch(sourceId: Int, timeStep: Long)","description":"we.rashchenko.neurons.inputs.SupervisedNeuron.touch","location":"chnn-library/we.rashchenko.neurons.inputs/-supervised-neuron/touch.html","searchKeys":["touch","open override fun touch(sourceId: Int, timeStep: Long)","we.rashchenko.neurons.inputs.SupervisedNeuron.touch"]},{"name":"open override fun update(feedback: Feedback, timeStep: Long)","description":"we.rashchenko.neurons.ControlledNeuron.update","location":"chnn-library/we.rashchenko.neurons/-controlled-neuron/update.html","searchKeys":["update","open override fun update(feedback: Feedback, timeStep: Long)","we.rashchenko.neurons.ControlledNeuron.update"]},{"name":"open override fun update(feedback: Feedback, timeStep: Long)","description":"we.rashchenko.neurons.inputs.MirroringNeuron.update","location":"chnn-library/we.rashchenko.neurons.inputs/-mirroring-neuron/update.html","searchKeys":["update","open override fun update(feedback: Feedback, timeStep: Long)","we.rashchenko.neurons.inputs.MirroringNeuron.update"]},{"name":"open override fun update(feedback: Feedback, timeStep: Long)","description":"we.rashchenko.neurons.inputs.SupervisedNeuron.update","location":"chnn-library/we.rashchenko.neurons.inputs/-supervised-neuron/update.html","searchKeys":["update","open override fun update(feedback: Feedback, timeStep: Long)","we.rashchenko.neurons.inputs.SupervisedNeuron.update"]},{"name":"open override val active: Boolean","description":"we.rashchenko.neurons.ControlledNeuron.active","location":"chnn-library/we.rashchenko.neurons/-controlled-neuron/active.html","searchKeys":["active","open override val active: Boolean","we.rashchenko.neurons.ControlledNeuron.active"]},{"name":"open override val active: Boolean","description":"we.rashchenko.neurons.inputs.MirroringNeuron.active","location":"chnn-library/we.rashchenko.neurons.inputs/-mirroring-neuron/active.html","searchKeys":["active","open override val active: Boolean","we.rashchenko.neurons.inputs.MirroringNeuron.active"]},{"name":"open override val active: Boolean","description":"we.rashchenko.neurons.inputs.SupervisedNeuron.active","location":"chnn-library/we.rashchenko.neurons.inputs/-supervised-neuron/active.html","searchKeys":["active","open override val active: Boolean","we.rashchenko.neurons.inputs.SupervisedNeuron.active"]},{"name":"open override val activities: List<Activity>","description":"we.rashchenko.environments.InputOutputEnvironment.activities","location":"chnn-library/we.rashchenko.environments/-input-output-environment/activities.html","searchKeys":["activities","open override val activities: List<Activity>","we.rashchenko.environments.InputOutputEnvironment.activities"]},{"name":"open override val author: String","description":"we.rashchenko.neurons.NeuronsManager.author","location":"chnn-library/we.rashchenko.neurons/-neurons-manager/author.html","searchKeys":["author","open override val author: String","we.rashchenko.neurons.NeuronsManager.author"]},{"name":"open override val baseNeuron: Neuron","description":"we.rashchenko.neurons.inputs.MirroringNeuron.baseNeuron","location":"chnn-library/we.rashchenko.neurons.inputs/-mirroring-neuron/base-neuron.html","searchKeys":["baseNeuron","open override val baseNeuron: Neuron","we.rashchenko.neurons.inputs.MirroringNeuron.baseNeuron"]},{"name":"open override val baseNeuron: Neuron","description":"we.rashchenko.neurons.inputs.SupervisedNeuron.baseNeuron","location":"chnn-library/we.rashchenko.neurons.inputs/-supervised-neuron/base-neuron.html","searchKeys":["baseNeuron","open override val baseNeuron: Neuron","we.rashchenko.neurons.inputs.SupervisedNeuron.baseNeuron"]},{"name":"open override val connections: MutableMap<Int, MutableList<Int>>","description":"we.rashchenko.networks.StochasticNeuralNetwork.connections","location":"chnn-library/we.rashchenko.networks/-stochastic-neural-network/connections.html","searchKeys":["connections","open override val connections: MutableMap<Int, MutableList<Int>>","we.rashchenko.networks.StochasticNeuralNetwork.connections"]},{"name":"open override val externalActivity: Activity","description":"we.rashchenko.neurons.inputs.MirroringNeuron.externalActivity","location":"chnn-library/we.rashchenko.neurons.inputs/-mirroring-neuron/external-activity.html","searchKeys":["externalActivity","open override val externalActivity: Activity","we.rashchenko.neurons.inputs.MirroringNeuron.externalActivity"]},{"name":"open override val externalActivity: HiddenActivity","description":"we.rashchenko.neurons.inputs.SupervisedNeuron.externalActivity","location":"chnn-library/we.rashchenko.neurons.inputs/-supervised-neuron/external-activity.html","searchKeys":["externalActivity","open override val externalActivity: HiddenActivity","we.rashchenko.neurons.inputs.SupervisedNeuron.externalActivity"]},{"name":"open override val inputActivities: List<ExternallyControlledActivity>","description":"we.rashchenko.environments.SimpleEnvironment.inputActivities","location":"chnn-library/we.rashchenko.environments/-simple-environment/input-activities.html","searchKeys":["inputActivities","open override val inputActivities: List<ExternallyControlledActivity>","we.rashchenko.environments.SimpleEnvironment.inputActivities"]},{"name":"open override val inputNeuronIDs: MutableSet<Int>","description":"we.rashchenko.networks.StochasticNeuralNetwork.inputNeuronIDs","location":"chnn-library/we.rashchenko.networks/-stochastic-neural-network/input-neuron-i-ds.html","searchKeys":["inputNeuronIDs","open override val inputNeuronIDs: MutableSet<Int>","we.rashchenko.networks.StochasticNeuralNetwork.inputNeuronIDs"]},{"name":"open override val name: String","description":"we.rashchenko.neurons.NeuronsManager.name","location":"chnn-library/we.rashchenko.neurons/-neurons-manager/name.html","searchKeys":["name","open override val name: String","we.rashchenko.neurons.NeuronsManager.name"]},{"name":"open override val neuralNetwork: NeuralNetworkWithInput","description":"we.rashchenko.networks.builders.NeuralNetworkIn2DBuilderFixed.neuralNetwork","location":"chnn-library/we.rashchenko.networks.builders/-neural-network-in2-d-builder-fixed/neural-network.html","searchKeys":["neuralNetwork","open override val neuralNetwork: NeuralNetworkWithInput","we.rashchenko.networks.builders.NeuralNetworkIn2DBuilderFixed.neuralNetwork"]},{"name":"open override val neuronIDs: Collection<Int>","description":"we.rashchenko.networks.StochasticNeuralNetwork.neuronIDs","location":"chnn-library/we.rashchenko.networks/-stochastic-neural-network/neuron-i-ds.html","searchKeys":["neuronIDs","open override val neuronIDs: Collection<Int>","we.rashchenko.networks.StochasticNeuralNetwork.neuronIDs"]},{"name":"open override val outputActivities: List<ExternallyControlledHiddenActivity>","description":"we.rashchenko.environments.SimpleEnvironment.outputActivities","location":"chnn-library/we.rashchenko.environments/-simple-environment/output-activities.html","searchKeys":["outputActivities","open override val outputActivities: List<ExternallyControlledHiddenActivity>","we.rashchenko.environments.SimpleEnvironment.outputActivities"]},{"name":"open override val size: Int","description":"we.rashchenko.utils.collections.AlwaysSorted.size","location":"chnn-library/we.rashchenko.utils.collections/-always-sorted/size.html","searchKeys":["size","open override val size: Int","we.rashchenko.utils.collections.AlwaysSorted.size"]},{"name":"open override var active: Boolean = false","description":"we.rashchenko.base.ExternallyControlledActivity.active","location":"chnn-library/we.rashchenko.base/-externally-controlled-activity/active.html","searchKeys":["active","open override var active: Boolean = false","we.rashchenko.base.ExternallyControlledActivity.active"]},{"name":"open override var active: Boolean = false","description":"we.rashchenko.base.ExternallyControlledHiddenActivity.active","location":"chnn-library/we.rashchenko.base/-externally-controlled-hidden-activity/active.html","searchKeys":["active","open override var active: Boolean = false","we.rashchenko.base.ExternallyControlledHiddenActivity.active"]},{"name":"open override var hidden: Boolean = false","description":"we.rashchenko.base.ExternallyControlledHiddenActivity.hidden","location":"chnn-library/we.rashchenko.base/-externally-controlled-hidden-activity/hidden.html","searchKeys":["hidden","open override var hidden: Boolean = false","we.rashchenko.base.ExternallyControlledHiddenActivity.hidden"]},{"name":"open override var timeStep: Long = 0","description":"we.rashchenko.environments.SimpleEnvironment.timeStep","location":"chnn-library/we.rashchenko.environments/-simple-environment/time-step.html","searchKeys":["timeStep","open override var timeStep: Long = 0","we.rashchenko.environments.SimpleEnvironment.timeStep"]},{"name":"open override var timeStep: Long = 0","description":"we.rashchenko.networks.StochasticNeuralNetwork.timeStep","location":"chnn-library/we.rashchenko.networks/-stochastic-neural-network/time-step.html","searchKeys":["timeStep","open override var timeStep: Long = 0","we.rashchenko.networks.StochasticNeuralNetwork.timeStep"]},{"name":"open override var timeStep: Long = 0","description":"we.rashchenko.networks.builders.Evolution.timeStep","location":"chnn-library/we.rashchenko.networks.builders/-evolution/time-step.html","searchKeys":["timeStep","open override var timeStep: Long = 0","we.rashchenko.networks.builders.Evolution.timeStep"]},{"name":"val NEUTRAL: Feedback","description":"we.rashchenko.base.Feedback.Companion.NEUTRAL","location":"chnn-library/we.rashchenko.base/-feedback/-companion/-n-e-u-t-r-a-l.html","searchKeys":["NEUTRAL","val NEUTRAL: Feedback","we.rashchenko.base.Feedback.Companion.NEUTRAL"]},{"name":"val ONES: Vector2","description":"we.rashchenko.utils.Vector2.Companion.ONES","location":"chnn-library/we.rashchenko.utils/-vector2/-companion/-o-n-e-s.html","searchKeys":["ONES","val ONES: Vector2","we.rashchenko.utils.Vector2.Companion.ONES"]},{"name":"val VERY_NEGATIVE: Feedback","description":"we.rashchenko.base.Feedback.Companion.VERY_NEGATIVE","location":"chnn-library/we.rashchenko.base/-feedback/-companion/-v-e-r-y_-n-e-g-a-t-i-v-e.html","searchKeys":["VERY_NEGATIVE","val VERY_NEGATIVE: Feedback","we.rashchenko.base.Feedback.Companion.VERY_NEGATIVE"]},{"name":"val VERY_POSITIVE: Feedback","description":"we.rashchenko.base.Feedback.Companion.VERY_POSITIVE","location":"chnn-library/we.rashchenko.base/-feedback/-companion/-v-e-r-y_-p-o-s-i-t-i-v-e.html","searchKeys":["VERY_POSITIVE","val VERY_POSITIVE: Feedback","we.rashchenko.base.Feedback.Companion.VERY_POSITIVE"]},{"name":"val ZERO: Vector2","description":"we.rashchenko.utils.Vector2.Companion.ZERO","location":"chnn-library/we.rashchenko.utils/-vector2/-companion/-z-e-r-o.html","searchKeys":["ZERO","val ZERO: Vector2","we.rashchenko.utils.Vector2.Companion.ZERO"]},{"name":"val accuracy: Double","description":"we.rashchenko.utils.MetricsCalculator.accuracy","location":"chnn-library/we.rashchenko.utils/-metrics-calculator/accuracy.html","searchKeys":["accuracy","val accuracy: Double","we.rashchenko.utils.MetricsCalculator.accuracy"]},{"name":"val averageActivity: Double","description":"we.rashchenko.neurons.ControlledNeuron.averageActivity","location":"chnn-library/we.rashchenko.neurons/-controlled-neuron/average-activity.html","searchKeys":["averageActivity","val averageActivity: Double","we.rashchenko.neurons.ControlledNeuron.averageActivity"]},{"name":"val averageForgetTime: Double","description":"we.rashchenko.neurons.ControlledNeuron.averageForgetTime","location":"chnn-library/we.rashchenko.neurons/-controlled-neuron/average-forget-time.html","searchKeys":["averageForgetTime","val averageForgetTime: Double","we.rashchenko.neurons.ControlledNeuron.averageForgetTime"]},{"name":"val averageGetActiveTime: Double","description":"we.rashchenko.neurons.ControlledNeuron.averageGetActiveTime","location":"chnn-library/we.rashchenko.neurons/-controlled-neuron/average-get-active-time.html","searchKeys":["averageGetActiveTime","val averageGetActiveTime: Double","we.rashchenko.neurons.ControlledNeuron.averageGetActiveTime"]},{"name":"val averageGetFeedbackTime: Double","description":"we.rashchenko.neurons.ControlledNeuron.averageGetFeedbackTime","location":"chnn-library/we.rashchenko.neurons/-controlled-neuron/average-get-feedback-time.html","searchKeys":["averageGetFeedbackTime","val averageGetFeedbackTime: Double","we.rashchenko.neurons.ControlledNeuron.averageGetFeedbackTime"]},{"name":"val averageTouchTime: Double","description":"we.rashchenko.neurons.ControlledNeuron.averageTouchTime","location":"chnn-library/we.rashchenko.neurons/-controlled-neuron/average-touch-time.html","searchKeys":["averageTouchTime","val averageTouchTime: Double","we.rashchenko.neurons.ControlledNeuron.averageTouchTime"]},{"name":"val averageUpdateTime: Double","description":"we.rashchenko.neurons.ControlledNeuron.averageUpdateTime","location":"chnn-library/we.rashchenko.neurons/-controlled-neuron/average-update-time.html","searchKeys":["averageUpdateTime","val averageUpdateTime: Double","we.rashchenko.neurons.ControlledNeuron.averageUpdateTime"]},{"name":"val chooseProbability: Double","description":"we.rashchenko.neurons.SamplerStats.chooseProbability","location":"chnn-library/we.rashchenko.neurons/-sampler-stats/choose-probability.html","searchKeys":["chooseProbability","val chooseProbability: Double","we.rashchenko.neurons.SamplerStats.chooseProbability"]},{"name":"val comparator: Comparator<T>","description":"we.rashchenko.utils.collections.AlwaysSorted.comparator","location":"chnn-library/we.rashchenko.utils.collections/-always-sorted/comparator.html","searchKeys":["comparator","val comparator: Comparator<T>","we.rashchenko.utils.collections.AlwaysSorted.comparator"]},{"name":"val population: Int","description":"we.rashchenko.neurons.SamplerStats.population","location":"chnn-library/we.rashchenko.neurons/-sampler-stats/population.html","searchKeys":["population","val population: Int","we.rashchenko.neurons.SamplerStats.population"]},{"name":"val score: Double","description":"we.rashchenko.neurons.SamplerStats.score","location":"chnn-library/we.rashchenko.neurons/-sampler-stats/score.html","searchKeys":["score","val score: Double","we.rashchenko.neurons.SamplerStats.score"]},{"name":"val value: Double","description":"we.rashchenko.base.Feedback.value","location":"chnn-library/we.rashchenko.base/-feedback/value.html","searchKeys":["value","val value: Double","we.rashchenko.base.Feedback.value"]},{"name":"val value: Double","description":"we.rashchenko.utils.ExponentialMovingAverageHotStart.value","location":"chnn-library/we.rashchenko.utils/-exponential-moving-average-hot-start/value.html","searchKeys":["value","val value: Double","we.rashchenko.utils.ExponentialMovingAverageHotStart.value"]},{"name":"val x: Float","description":"we.rashchenko.utils.Vector2.x","location":"chnn-library/we.rashchenko.utils/-vector2/x.html","searchKeys":["x","val x: Float","we.rashchenko.utils.Vector2.x"]},{"name":"val y: Float","description":"we.rashchenko.utils.Vector2.y","location":"chnn-library/we.rashchenko.utils/-vector2/y.html","searchKeys":["y","val y: Float","we.rashchenko.utils.Vector2.y"]},{"name":"var control: Boolean = false","description":"we.rashchenko.neurons.ControlledNeuron.control","location":"chnn-library/we.rashchenko.neurons/-controlled-neuron/control.html","searchKeys":["control","var control: Boolean = false","we.rashchenko.neurons.ControlledNeuron.control"]},{"name":"var numControlledForget: Int = 0","description":"we.rashchenko.neurons.ControlledNeuron.numControlledForget","location":"chnn-library/we.rashchenko.neurons/-controlled-neuron/num-controlled-forget.html","searchKeys":["numControlledForget","var numControlledForget: Int = 0","we.rashchenko.neurons.ControlledNeuron.numControlledForget"]},{"name":"var numControlledGetActive: Int = 0","description":"we.rashchenko.neurons.ControlledNeuron.numControlledGetActive","location":"chnn-library/we.rashchenko.neurons/-controlled-neuron/num-controlled-get-active.html","searchKeys":["numControlledGetActive","var numControlledGetActive: Int = 0","we.rashchenko.neurons.ControlledNeuron.numControlledGetActive"]},{"name":"var numControlledGetFeedback: Int = 0","description":"we.rashchenko.neurons.ControlledNeuron.numControlledGetFeedback","location":"chnn-library/we.rashchenko.neurons/-controlled-neuron/num-controlled-get-feedback.html","searchKeys":["numControlledGetFeedback","var numControlledGetFeedback: Int = 0","we.rashchenko.neurons.ControlledNeuron.numControlledGetFeedback"]},{"name":"var numControlledTouch: Int = 0","description":"we.rashchenko.neurons.ControlledNeuron.numControlledTouch","location":"chnn-library/we.rashchenko.neurons/-controlled-neuron/num-controlled-touch.html","searchKeys":["numControlledTouch","var numControlledTouch: Int = 0","we.rashchenko.neurons.ControlledNeuron.numControlledTouch"]},{"name":"var numControlledUpdate: Int = 0","description":"we.rashchenko.neurons.ControlledNeuron.numControlledUpdate","location":"chnn-library/we.rashchenko.neurons/-controlled-neuron/num-controlled-update.html","searchKeys":["numControlledUpdate","var numControlledUpdate: Int = 0","we.rashchenko.neurons.ControlledNeuron.numControlledUpdate"]},{"name":"var validationMode: Boolean = false","description":"we.rashchenko.environments.SimpleEnvironment.validationMode","location":"chnn-library/we.rashchenko.environments/-simple-environment/validation-mode.html","searchKeys":["validationMode","var validationMode: Boolean = false","we.rashchenko.environments.SimpleEnvironment.validationMode"]},{"name":"var value: Double","description":"we.rashchenko.utils.ExponentialMovingAverage.value","location":"chnn-library/we.rashchenko.utils/-exponential-moving-average/value.html","searchKeys":["value","var value: Double","we.rashchenko.utils.ExponentialMovingAverage.value"]}]
